// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internal

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerTokenScopes = "bearerToken.Scopes"
)

// Defines values for RecordEventsJSONBodyEvent.
const (
	HIT  RecordEventsJSONBodyEvent = "HIT"
	MISS RecordEventsJSONBodyEvent = "MISS"
)

// Defines values for RecordEventsJSONBodySource.
const (
	LOCAL  RecordEventsJSONBodySource = "LOCAL"
	REMOTE RecordEventsJSONBodySource = "REMOTE"
)

// ArtifactQueryJSONBody defines parameters for ArtifactQuery.
type ArtifactQueryJSONBody struct {
	// Hashes artifact hashes
	Hashes []string `json:"hashes"`
}

// ArtifactQueryParams defines parameters for ArtifactQuery.
type ArtifactQueryParams struct {
	// TeamId The Team identifier to perform the request on behalf of.
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// Slug The Team slug to perform the request on behalf of.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty"`
}

// RecordEventsJSONBody defines parameters for RecordEvents.
type RecordEventsJSONBody = []struct {
	// Duration The time taken to generate the artifact. This should be sent as a body parameter on `HIT` events.
	Duration *float32 `json:"duration,omitempty"`

	// Event One of `HIT` or `MISS`. `HIT` specifies that a cached artifact for `hash` was found in the cache. `MISS` specifies that a cached artifact with `hash` was not found.
	Event RecordEventsJSONBodyEvent `json:"event"`

	// Hash The artifact hash
	Hash string `json:"hash"`

	// SessionId A UUID (universally unique identifer) for the session that generated this event.
	SessionId string `json:"sessionId"`

	// Source One of `LOCAL` or `REMOTE`. `LOCAL` specifies that the cache event was from the user's filesystem cache. `REMOTE` specifies that the cache event is from a remote cache.
	Source RecordEventsJSONBodySource `json:"source"`
}

// RecordEventsParams defines parameters for RecordEvents.
type RecordEventsParams struct {
	// TeamId The Team identifier to perform the request on behalf of.
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// Slug The Team slug to perform the request on behalf of.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty"`

	// XArtifactClientCi The continuous integration or delivery environment where this artifact is downloaded.
	XArtifactClientCi *string `json:"x-artifact-client-ci,omitempty"`

	// XArtifactClientInteractive 1 if the client is an interactive shell. Otherwise 0
	XArtifactClientInteractive *int `json:"x-artifact-client-interactive,omitempty"`
}

// RecordEventsJSONBodyEvent defines parameters for RecordEvents.
type RecordEventsJSONBodyEvent string

// RecordEventsJSONBodySource defines parameters for RecordEvents.
type RecordEventsJSONBodySource string

// StatusParams defines parameters for Status.
type StatusParams struct {
	// TeamId The Team identifier to perform the request on behalf of.
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// Slug The Team slug to perform the request on behalf of.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty"`
}

// DownloadArtifactParams defines parameters for DownloadArtifact.
type DownloadArtifactParams struct {
	// TeamId The Team identifier to perform the request on behalf of.
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// Slug The Team slug to perform the request on behalf of.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty"`

	// XArtifactClientCi The continuous integration or delivery environment where this artifact is downloaded.
	XArtifactClientCi *string `json:"x-artifact-client-ci,omitempty"`

	// XArtifactClientInteractive 1 if the client is an interactive shell. Otherwise 0
	XArtifactClientInteractive *int `json:"x-artifact-client-interactive,omitempty"`
}

// ArtifactExistsParams defines parameters for ArtifactExists.
type ArtifactExistsParams struct {
	// TeamId The Team identifier to perform the request on behalf of.
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// Slug The Team slug to perform the request on behalf of.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty"`
}

// UploadArtifactParams defines parameters for UploadArtifact.
type UploadArtifactParams struct {
	// TeamId The Team identifier to perform the request on behalf of.
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// Slug The Team slug to perform the request on behalf of.
	Slug *string `form:"slug,omitempty" json:"slug,omitempty"`

	// ContentLength The artifact size in bytes
	ContentLength float32 `json:"Content-Length"`

	// XArtifactDuration The time taken to generate the uploaded artifact in milliseconds.
	XArtifactDuration *float32 `json:"x-artifact-duration,omitempty"`

	// XArtifactClientCi The continuous integration or delivery environment where this artifact was generated.
	XArtifactClientCi *string `json:"x-artifact-client-ci,omitempty"`

	// XArtifactClientInteractive 1 if the client is an interactive shell. Otherwise 0
	XArtifactClientInteractive *int `json:"x-artifact-client-interactive,omitempty"`

	// XArtifactTag The base64 encoded tag for this artifact. The value is sent back to clients when the artifact is downloaded as the header `x-artifact-tag`
	XArtifactTag *string `json:"x-artifact-tag,omitempty"`
}

// ArtifactQueryJSONRequestBody defines body for ArtifactQuery for application/json ContentType.
type ArtifactQueryJSONRequestBody ArtifactQueryJSONBody

// RecordEventsJSONRequestBody defines body for RecordEvents for application/json ContentType.
type RecordEventsJSONRequestBody = RecordEventsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Query information about an artifact
	// (POST /v8/artifacts)
	ArtifactQuery(w http.ResponseWriter, r *http.Request, params ArtifactQueryParams)
	// Record an artifacts cache usage event
	// (POST /v8/artifacts/events)
	RecordEvents(w http.ResponseWriter, r *http.Request, params RecordEventsParams)
	// Get status of Remote Caching for this principal
	// (GET /v8/artifacts/status)
	Status(w http.ResponseWriter, r *http.Request, params StatusParams)
	// Download a cache artifact
	// (GET /v8/artifacts/{hash})
	DownloadArtifact(w http.ResponseWriter, r *http.Request, hash string, params DownloadArtifactParams)
	// Check if a cache artifact exists
	// (HEAD /v8/artifacts/{hash})
	ArtifactExists(w http.ResponseWriter, r *http.Request, hash string, params ArtifactExistsParams)
	// Upload a cache artifact
	// (PUT /v8/artifacts/{hash})
	UploadArtifact(w http.ResponseWriter, r *http.Request, hash string, params UploadArtifactParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ArtifactQuery operation middleware
func (siw *ServerInterfaceWrapper) ArtifactQuery(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ArtifactQueryParams

	// ------------- Optional query parameter "teamId" -------------

	err = runtime.BindQueryParameter("form", true, false, "teamId", r.URL.Query(), &params.TeamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", r.URL.Query(), &params.Slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArtifactQuery(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RecordEvents operation middleware
func (siw *ServerInterfaceWrapper) RecordEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RecordEventsParams

	// ------------- Optional query parameter "teamId" -------------

	err = runtime.BindQueryParameter("form", true, false, "teamId", r.URL.Query(), &params.TeamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", r.URL.Query(), &params.Slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "x-artifact-client-ci" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-client-ci")]; found {
		var XArtifactClientCi string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-client-ci", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-client-ci", valueList[0], &XArtifactClientCi, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-client-ci", Err: err})
			return
		}

		params.XArtifactClientCi = &XArtifactClientCi

	}

	// ------------- Optional header parameter "x-artifact-client-interactive" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-client-interactive")]; found {
		var XArtifactClientInteractive int
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-client-interactive", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-client-interactive", valueList[0], &XArtifactClientInteractive, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-client-interactive", Err: err})
			return
		}

		params.XArtifactClientInteractive = &XArtifactClientInteractive

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RecordEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Status operation middleware
func (siw *ServerInterfaceWrapper) Status(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params StatusParams

	// ------------- Optional query parameter "teamId" -------------

	err = runtime.BindQueryParameter("form", true, false, "teamId", r.URL.Query(), &params.TeamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", r.URL.Query(), &params.Slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Status(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DownloadArtifact operation middleware
func (siw *ServerInterfaceWrapper) DownloadArtifact(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", mux.Vars(r)["hash"], &hash, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DownloadArtifactParams

	// ------------- Optional query parameter "teamId" -------------

	err = runtime.BindQueryParameter("form", true, false, "teamId", r.URL.Query(), &params.TeamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", r.URL.Query(), &params.Slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "x-artifact-client-ci" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-client-ci")]; found {
		var XArtifactClientCi string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-client-ci", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-client-ci", valueList[0], &XArtifactClientCi, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-client-ci", Err: err})
			return
		}

		params.XArtifactClientCi = &XArtifactClientCi

	}

	// ------------- Optional header parameter "x-artifact-client-interactive" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-client-interactive")]; found {
		var XArtifactClientInteractive int
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-client-interactive", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-client-interactive", valueList[0], &XArtifactClientInteractive, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-client-interactive", Err: err})
			return
		}

		params.XArtifactClientInteractive = &XArtifactClientInteractive

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadArtifact(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ArtifactExists operation middleware
func (siw *ServerInterfaceWrapper) ArtifactExists(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", mux.Vars(r)["hash"], &hash, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ArtifactExistsParams

	// ------------- Optional query parameter "teamId" -------------

	err = runtime.BindQueryParameter("form", true, false, "teamId", r.URL.Query(), &params.TeamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", r.URL.Query(), &params.Slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArtifactExists(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadArtifact operation middleware
func (siw *ServerInterfaceWrapper) UploadArtifact(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", mux.Vars(r)["hash"], &hash, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadArtifactParams

	// ------------- Optional query parameter "teamId" -------------

	err = runtime.BindQueryParameter("form", true, false, "teamId", r.URL.Query(), &params.TeamId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamId", Err: err})
		return
	}

	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", r.URL.Query(), &params.Slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Content-Length" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Length")]; found {
		var ContentLength float32
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Content-Length", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Length", valueList[0], &ContentLength, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Content-Length", Err: err})
			return
		}

		params.ContentLength = ContentLength

	} else {
		err = fmt.Errorf("Header parameter Content-Length is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Content-Length", Err: err})
		return
	}

	// ------------- Optional header parameter "x-artifact-duration" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-duration")]; found {
		var XArtifactDuration float32
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-duration", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-duration", valueList[0], &XArtifactDuration, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-duration", Err: err})
			return
		}

		params.XArtifactDuration = &XArtifactDuration

	}

	// ------------- Optional header parameter "x-artifact-client-ci" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-client-ci")]; found {
		var XArtifactClientCi string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-client-ci", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-client-ci", valueList[0], &XArtifactClientCi, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-client-ci", Err: err})
			return
		}

		params.XArtifactClientCi = &XArtifactClientCi

	}

	// ------------- Optional header parameter "x-artifact-client-interactive" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-client-interactive")]; found {
		var XArtifactClientInteractive int
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-client-interactive", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-client-interactive", valueList[0], &XArtifactClientInteractive, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-client-interactive", Err: err})
			return
		}

		params.XArtifactClientInteractive = &XArtifactClientInteractive

	}

	// ------------- Optional header parameter "x-artifact-tag" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-artifact-tag")]; found {
		var XArtifactTag string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-artifact-tag", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-artifact-tag", valueList[0], &XArtifactTag, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-artifact-tag", Err: err})
			return
		}

		params.XArtifactTag = &XArtifactTag

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadArtifact(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v8/artifacts", wrapper.ArtifactQuery).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v8/artifacts/events", wrapper.RecordEvents).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v8/artifacts/status", wrapper.Status).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v8/artifacts/{hash}", wrapper.DownloadArtifact).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v8/artifacts/{hash}", wrapper.ArtifactExists).Methods("HEAD")

	r.HandleFunc(options.BaseURL+"/v8/artifacts/{hash}", wrapper.UploadArtifact).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
